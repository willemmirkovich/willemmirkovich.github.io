[{"content":"Recently I have been needing to run various scripts/migrations on a VM. Connecting via ssh using my ~/.ssh/config file has been really nice, as I can keep my port mappings and identity in a single spot.\nOne problem I ran into was needing to get the file contents from a tmux session standard output that I was able to get using tmux capture-pane. Since copy/paste isn\u0026rsquo;t configured the same on this VM as my local machine, I wanted to quickly copy the file over to my local and then get to copy/paste to my hearts content. But, who wants to fill out the not fun host information in the scp command.\nSolution Low and behold, scp has a -F option, allowing you to use host names specified in your .ssh/config file!\nscp -F ~/.ssh/config [Host]:/remote/path /local/path Nothing ground breaking, but did want to share as I didn\u0026rsquo;t find anything online when searching.\n","permalink":"https://willemmirkovich.github.io/posts/scp_config/","summary":"\u003cp\u003eRecently I have been needing to run various scripts/migrations on\na VM. Connecting via \u003ccode\u003essh\u003c/code\u003e using my \u003ccode\u003e~/.ssh/config\u003c/code\u003e file has been\nreally nice, as I can keep my port mappings and identity in a single spot.\u003c/p\u003e\n\u003cp\u003eOne problem I ran into was needing to get the file contents from a tmux session\nstandard output that I was able to get using \u003ccode\u003etmux capture-pane\u003c/code\u003e. Since copy/paste\nisn\u0026rsquo;t configured the same on this VM as my local machine, I wanted to quickly\ncopy the file over to my local and then get to copy/paste to my hearts content. But,\nwho wants to fill out the not fun host information in the \u003ccode\u003escp\u003c/code\u003e command.\u003c/p\u003e","title":"Using `scp` with existing `ssh/config` file"},{"content":"Spoiler Alert This was originally a jupyter notebook!\nWhile taking a recent Machine Learning course for my masters, I had the idea of how nice it would be if I did a cool notebook to be able to post it to my personal blog with almost no work involved.\nAnd, to my pleasant suprise, it was pretty simple! Here are the steps to get there:\nWhat you can render Code blocks // this is some javascript var x = 5; console.log(x); # now some python for el in l: print(el) Run actual code with outputs import numpy as np x = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9], ]) x array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) import pandas as pd # NOTE: need to set this option, or table renders # come out wonky when coverting to markdown pd.set_option(\u0026#39;display.notebook_repr_html\u0026#39;, False) rows = [ { \u0026#39;column_1\u0026#39;: 1, \u0026#39;column_2\u0026#39;: \u0026#39;yippee\u0026#39;, \u0026#39;column_3\u0026#39;: {\u0026#39;test\u0026#39;: 10} }, { \u0026#39;column_1\u0026#39;: 2, \u0026#39;column_2\u0026#39;: \u0026#39;nope\u0026#39;, \u0026#39;column_3\u0026#39;: {\u0026#39;working?\u0026#39;: \u0026#39;maybe...\u0026#39;} }, ] df = pd.DataFrame(rows) df column_1 column_2 column_3 0 1 yippee {'test': 10} 1 2 nope {'working?': 'maybe...'} import matplotlib.pyplot as plt fig, ax = plt.subplots() x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) y = x ** 2 ax.plot(x, y, color=\u0026#39;green\u0026#39;) ax.set_title(\u0026#39;my plot\u0026#39;) None Latex This is an inline equation: $f(x) = mx + b$\nA fancy inline summation: $\\sum^n_i(x_i^2)$\nAnd new line equations $$f(x) = \\beta_0 + \\beta_1 * x_1 + \\beta_2 * x_2$$\nHow to get the same functionality The following steps should be able to be applied to most statically rendered websites\nStep 1: Have Katex Support If you are using a static site generator, such as hugo, all of your websites posts will be some sort of .md file. Since most of the notebooks I work with for classes make use of Latex equations, having this work out of the box is super important for me.\nLuckily, Katex has awesome auto-rendering capabilities that come out of the box. To use these on your own site, look to the Auto-render Extension:Usage docs.\nOut of the box, rendering is only supported for $$ delimiters, and will render these on their own line. So, to get inline latex, you need to add the $ delimiter option. Below is my custom footer applied to every page:\n{{- /* Footer custom content area start */ -}} {{- /* Insert any custom code web-analytics, resources, etc. here */ -}} {{- /* Footer custom content area end */ -}} \u0026lt;!-- https://katex.org/docs/autorender.html#usage --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, // render inline {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false} ], // • rendering keys, e.g.: throwOnError : false }); }); \u0026lt;/script\u0026gt; Step 2: Utilize jupyter nbconvert Once you have a notebook ready to be posted, the nbcovert package makes it easy to covert from a .ipynb to any format. For this use case, the markdown format is what we want:\njupyter nbconvert --to markdown [notebook].ipynb Once done, you will get a nice [notebook].md file, along with [notebook]_files directory with any static images you generated (such as plots).\nNow that you have both of these, only thing necessary to do is copy these over to your site generator and test them out!\nSome additonal things you may need to do:\nIf using hugo, you may need to add a post header to the top of the markdown file, like: --- title: \u0026#34;Who needs titles\u0026#34; date: 2024-01-25T13:16:30-05:00 draft: false --- To get static file generation working, I needed to move the [notebook]_files to my static directory for my site. In addition to this, I also modified the relative link for plots in the [notebook].md file to site links, like so: **before** ![png](notebook_files/notebook_4_0.png) **after** ![png](/notebook_files/notebook_4_0.png) Voila You can now use these combined tools to easily render jupyter notebooks to your static site!\nOnly steps I am thinking of improving is making this into a full blown script, but that is work for another night\n","permalink":"https://willemmirkovich.github.io/posts/render_notebook/","summary":"\u003cp\u003e\u003cstrong\u003eSpoiler Alert\u003c/strong\u003e This was originally a jupyter notebook!\u003c/p\u003e\n\u003cp\u003eWhile taking a recent Machine Learning course for my masters, I had\nthe idea of how nice it would be if I did a cool notebook to be able\nto post it to my personal blog with almost no work involved.\u003c/p\u003e\n\u003cp\u003eAnd, to my pleasant suprise, it was pretty simple! Here are the steps to get there:\u003c/p\u003e\n\u003ch2 id=\"what-you-can-render\"\u003eWhat you can render\u003c/h2\u003e\n\u003ch3 id=\"code-blocks\"\u003eCode blocks\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// this is some javascript\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# now some python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e el \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e l:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(el)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"run-actual-code-with-outputs\"\u003eRun actual code with outputs\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003earray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e pandas \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pd\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# NOTE: need to set this option, or table renders\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# come out wonky when coverting to markdown\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_option(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;display.notebook_repr_html\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erows \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_1\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_2\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;yippee\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_3\u0026#39;\u003c/span\u003e: {\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;test\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_1\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_2\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;nope\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;column_3\u0026#39;\u003c/span\u003e: {\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;working?\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;maybe...\u0026#39;\u003c/span\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e] \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDataFrame(rows)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e   column_1 column_2                  column_3\n0         1   yippee              {'test': 10}\n1         2     nope  {'working?': 'maybe...'}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e plt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efig, ax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esubplots()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot(x, y, color\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;green\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_title(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;my plot\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"png\" loading=\"lazy\" src=\"/render_notebook_files/render_notebook_4_0.png\"\u003e\u003c/p\u003e","title":"Rendering a Jupyter Notebook in Markdown for Static Site Generation"},{"content":"My Full Setup I am maintaining my full development .config on github, so feel free to check it out: https://github.com/willemmirkovich/.config\nIntro After experimenting with it for many months throughout 2023, I have finally moved almost all of my professional/personal development to neovim.\nWhen I initially started out with neovim, I initially set things up with an out of the box setup provided by another developer. While this was helpful at first, it was based on what they needed for development, not myself. So many plugins that I was configuring either didn\u0026rsquo;t make a ton of sense to me at first or were a bit overkill. This led me to not really learning how the init.lua file was set, or being bogged down by the shear weight of the setup.\nSuccessful move to Neovim On my second go around, I took a different approach and went bottom up on my own. This allowed me to practice the basics of vim again, and think about the biggest things I needed from my editor, which are:\nsyntax highlighting smart autocomplete suggestions quick code traversal (goto definition, search) auto-formatting Once I knew what I needed, I was able to search for plugins, and add them iteratively. Adding them one by one proved really helpful, I could learn about their uses individually without having everything all at once and not connecting which plugin was doing what.\nIn addition to neovim, I have also moved to using tmux and alacritty, awesome projects that have brought my setup all together. Now that I am at a \u0026lsquo;version 1\u0026rsquo;, I feel my development has increased signifigantly, mostly due to some amazing individual plugins/packages:\ntelescope needs no introduction, find files/references throughout your repos in seconds mason-lspconfig enables quick and easy setup of all the major lsp packages you will want for languages nvim-treesitter for great syntax highlighting as well as other features I have yet to really dig into nvim-tmux-navigator for seamless transitioning between panes/buffers between nvim \u0026amp; tmux Future Improvements Here are some of the things I would like to do with my setup in the future:\nsplit up my init.lua file, as it is currently a little bloated find a good way to use jupyter notebooks with this setup, as I still use vscode for this currently :( ","permalink":"https://willemmirkovich.github.io/posts/move-nvim/","summary":"\u003ch2 id=\"my-full-setup\"\u003eMy Full Setup\u003c/h2\u003e\n\u003cp\u003eI am maintaining my full development \u003ccode\u003e.config\u003c/code\u003e on github, so feel free to check it out:\n\u003ca href=\"https://github.com/willemmirkovich/.config\"\u003ehttps://github.com/willemmirkovich/.config\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eAfter experimenting with it for many months throughout 2023,\nI have finally moved almost all of my professional/personal\ndevelopment to \u003ca href=\"https://neovim.io/\"\u003eneovim\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen I initially started out with neovim, I initially set things\nup with an out of the box setup provided by another developer.\nWhile this was helpful at first, it was based on what they needed\nfor development, not myself. So many plugins that I was configuring\neither didn\u0026rsquo;t make a ton of sense to me at first or were a bit overkill.\nThis led me to not really learning how the \u003ccode\u003einit.lua\u003c/code\u003e file was set, or\nbeing bogged down by the shear weight of the setup.\u003c/p\u003e","title":"Move to Neovim as my editor"},{"content":"AMGeO 2.0: Crafting an API for Geospace Data Scientists While working on the workshop we (AMGeO) hosted in collaboration with Earthcube, I submitted a notebook building off of the workshop materials and submitted it to Earthcube\u0026rsquo;s 2022 conference. This notebook was accepted and published alongside other notebooks presented at the conference.\nPublication Willem Mirkovich, Tomoko Matsuo, Liam Kilcommons. (2022). AMGeO 2.0: Crafting an API for Geospace Data Scientists (ec2022v2). Zenodo. https://doi.org/10.5281/zenodo.6780968\nPresentation The notebook and any other materials relevant to my presentation can be found here: https://github.com/earthcube2022/ec22_mirkovich_etal\nConference https://www.earthcube.org/2022-earthcube-annual-meeting\nAbstract The Assimilative Mapping of Geospace Observations (AMGeO) is a data science tool for the geospace science community that automates labor-intensive data acquisition and processing, combining observations from various sensors into assimilative maps of the high-latitude ionosphere. While AMGeO offers a highly configurable toolset, it currently requires both domain expertise and familiarity with Python to use it effectively for scientific research.\nTo remove hurdles for novice users and empower all AMGeO users, we have recently introduced a new Application Programming Interface (API) focused on enhanced user-experience, including better compatibility with Jupyter Notebooks, improved data manipulation with Xarray and more flexible data generation. This notebook will demonstrate the functionality offered by the new API and how to use AMGeO in conjunction with other popular Python research tools in order to accelerate geospace data science processes.\nAuthors Willem Mirkovich, Tomoko Matsuo, Liam Kilcommons\n","permalink":"https://willemmirkovich.github.io/posts/earthcube-2022/","summary":"\u003ch1 id=\"amgeo-20-crafting-an-api-for-geospace-data-scientists\"\u003eAMGeO 2.0: Crafting an API for Geospace Data Scientists\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"Earthcube Logo\" loading=\"lazy\" src=\"/img/earthcube-logo.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile working on the workshop we (AMGeO) hosted in collaboration with Earthcube, I submitted a notebook\nbuilding off of the workshop materials and submitted it to Earthcube\u0026rsquo;s 2022 conference.\nThis notebook was accepted and published alongside other notebooks presented at the conference.\u003c/p\u003e\n\u003ch2 id=\"publication\"\u003ePublication\u003c/h2\u003e\n\u003cp\u003eWillem Mirkovich, Tomoko Matsuo, Liam Kilcommons. (2022). AMGeO 2.0: Crafting an API for Geospace Data\nScientists (ec2022v2). Zenodo. \u003ca href=\"https://doi.org/10.5281/zenodo.6780968\"\u003ehttps://doi.org/10.5281/zenodo.6780968\u003c/a\u003e\u003c/p\u003e","title":"My presentation @ Earthcube 2022"},{"content":"\nIn coordination with Earthcube, the AMGeO team hosted a workshop in May 2022 to expose current/new AMGeO users to new functionality introduced, as well as applications of AMGeO data with other geospace tools.\nI led workshop in addition to other AMGeO team members: Liam Kilcommons, Tomoko Matsuo and Akash Ratheesh. We had support from Nicholas Bartel, and Earthcube team members.\nPre-workshop Before the workshop, I put together materials for attendees to refresh/learn about Python and specific packages used by AMGeO (Xarray, Cartopy, \u0026hellip;)\nThese materials can be found here: https://amgeo-collaboration.github.io/Earthcube-Workshop-2022-Intro/\nWorkshop During the workshop, we prepared multiple materials for attendees to discuss about, or work on.\nI primarily worked on materials for attendees to work on related to AMGeO\u0026rsquo;s new API.\nThose materials can be found here: https://github.com/AMGeO-Collaboration/Earthcube-Workshop-2022\nAcknowledgements AMGeO Liam Kilcommons Tomoko Matsuo Akash Ratheesh Nicholas Bartel Earthcube Soccoro Dominguez Lynne Schreiber ","permalink":"https://willemmirkovich.github.io/posts/amgeo-workshop/","summary":"\u003cp\u003e\u003cimg alt=\"AMGeO Logo\" loading=\"lazy\" src=\"/img/amgeo-logo.svg\"\u003e\u003c/p\u003e\n\u003cp\u003eIn coordination with Earthcube, the AMGeO team hosted a workshop in May 2022 to\nexpose current/new AMGeO users to new functionality introduced, as well as applications\nof AMGeO data with other geospace tools.\u003c/p\u003e\n\u003cp\u003eI led workshop in addition to other AMGeO team members: Liam Kilcommons, Tomoko Matsuo and Akash Ratheesh.\nWe had support from Nicholas Bartel, and Earthcube team members.\u003c/p\u003e\n\u003ch2 id=\"pre-workshop\"\u003ePre-workshop\u003c/h2\u003e\n\u003cp\u003eBefore the workshop, I put together materials for attendees to refresh/learn about Python and\nspecific packages used by AMGeO (Xarray, Cartopy, \u0026hellip;)\u003c/p\u003e","title":"AMGeO Earthcube Workshop 2022"},{"content":"As of late, I have really enjoyed using Jupyter Notebooks for my exploratory programming and data science. While immenesly user friendly in the browser, I have missed some of the following functionality I have come to use in my VSCode IDE:\nauto-complete syntax highlighting import warnings/missing package info For this reason, I have moved all of my jupyter development to VS Code\u0026rsquo;s Jupyter Environment. This extension comes baked with all the IDE utiliies I am accustomed to\u0026hellip;\nBut, I am missing my Vim keybindings for maniupulating/navigating notebook cells! The great Jupyter Vim binding project has great vim support for editting notebooks in the browser, such as\ny to copy a cell p to paste a cell j/k for navigating up and down among others.\nSo, to get this same functionality, I have implemented the Juypter Vim Keymap Extension, meant to work alongside the great Vim emulation Extension.\nThis package is very much in its infancy as it currently stands, but includes the following functionality currently:\nj \u0026amp; k for navigating cells down/up respectively y, x \u0026amp; p to copy/cut/paste cells u to undo gg and shift+g to jump to top/bottom cell o and shift+o to open new cell below/above i to edit cell As stated, this extension is very fresh and needs work to include more vim expected features.\nHope someone gets some use out of this! Hoping to add a lot in the future.\nCheckout the source =\u0026gt; https://github.com/willemmirkovich/vscode-jupyter-keymap-vim\n","permalink":"https://willemmirkovich.github.io/posts/vscode-jupyter-vim-keymap/","summary":"\u003cp\u003eAs of late, I have really enjoyed using \u003ca href=\"https://jupyter.org/\"\u003eJupyter Notebooks\u003c/a\u003e\nfor my exploratory programming and data science. While immenesly user friendly in the browser, I have missed some of the following functionality I have come to use in my VSCode IDE:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eauto-complete\u003c/li\u003e\n\u003cli\u003esyntax highlighting\u003c/li\u003e\n\u003cli\u003eimport warnings/missing package info\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor this reason, I have moved all of my jupyter development to\n\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter\"\u003eVS Code\u0026rsquo;s Jupyter Environment\u003c/a\u003e.\nThis extension comes baked with all the IDE utiliies I am\naccustomed to\u0026hellip;\u003c/p\u003e","title":"Vscode Jupyter Vim Keymap"},{"content":"Predictive Models of Ionospheric Convection Patterns During Substorms Related to STEVE While working as a Professional Research Assistant, I continued my Machine Learning work and applied some of the things I learned during my AGU 2020 presentation to work I completed with Tomoko Matsuo and Valerie Svaldi.\nPresentation All of the work I did for this presentation, in addition to links to my recorded talk and slides can be found in the following repository: AGU-2021\nAbstract The mysterious subauroral phenomenon STEVE (Strong Thermal Emission Velocity Enhancement) was discovered in 2016 by citizen observers, yet its physical mechanism isn’t completely understood.\nAssimilative Mapping of Geospace Observations (AMGeO) has enabled further analysis of STEVE events by providing global maps of high-latitude electrodynamic features for 32 STEVE and 32 non-STEVE substorm events.\nGlobal modes of ionospheric convection variability have been identified using principal component analysis of AMGeO maps for both categories of events. The largest difference manifests as the Principal Component 3 (PC3) that represents a pronounced westward extension of the dawn cell into the pre-midnight sector. Specifically, the amplitude of PC3 coefficients appears to anti-correlate the AL index with some time lag.\nUsing recurrent neural networks, constructed utilizing Long-Short-Term-Memory architecture and hyperparameter optimization techniques, a predictive model of the global convection patterns with respect to the AL index time series is being developed for both STEVE and non-STEVE substorm events. This study will help better understand how global ionospheric electrodynamics evolves through different phases of substorms with or without STEVE.\nAuthors Willem Mirkovich, Tomoko Matsuo, Valerie Svaldi\n","permalink":"https://willemmirkovich.github.io/posts/agu-2021/","summary":"\u003ch1 id=\"predictive-models-of-ionospheric-convection-patterns-during-substorms-related-to-steve\"\u003ePredictive Models of Ionospheric Convection Patterns During Substorms Related to STEVE\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"AGU Logo\" loading=\"lazy\" src=\"/img/agu-logo.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile working as a Professional Research Assistant, I continued my Machine Learning work\nand applied some of the things I learned during my AGU 2020 presentation to work I completed with\nTomoko Matsuo and Valerie Svaldi.\u003c/p\u003e\n\u003ch2 id=\"presentation\"\u003ePresentation\u003c/h2\u003e\n\u003cp\u003eAll of the work I did for this presentation, in addition to links to my recorded talk and slides\ncan be found in the following repository: \u003ca href=\"https://github.com/willemmirkovich/AGU-2021\"\u003eAGU-2021\u003c/a\u003e\u003c/p\u003e","title":"My presentation @ AGU 2021"},{"content":"\nDuring the CEDAR 2021 conference, AMGeO led a workhop. This workhop taught AMGeO users how to use AMGeO interactively on the Jupyter notebook environment via a web browser for different use case scenarios\nI led workshop in addition to other AMGeO team members: Liam Kilcommons, Tomoko Matsuo. We had support from Nicholas Bartel, Jason Li.\nSpecial thanks to Andrew Monaghan, who gave us support for running an AWS instance during the workshop.\nWorkshop Workshop CEDAR posting: https://cedarscience.org/workshop/2021-workshop-amgeo\nI primarily worked on materials we presented to attendees.\nThose materials can be found here: https://github.com/AMGeO-Collaboration/CEDAR-Workshop-2021\nAcknowledgements AMGeO Liam Kilcommons Tomoko Matsuo Akash Ratheesh Nicholas Bartel Jason Li CU Boulder IT Andrew Monaghan ","permalink":"https://willemmirkovich.github.io/posts/cedar-workshop/","summary":"\u003cp\u003e\u003cimg alt=\"AMGeO Logo\" loading=\"lazy\" src=\"/img/amgeo-logo.svg\"\u003e\u003c/p\u003e\n\u003cp\u003eDuring the CEDAR 2021 conference, AMGeO led a workhop. This workhop taught AMGeO users how to use AMGeO\ninteractively on the Jupyter notebook environment via a web browser for different use case scenarios\u003c/p\u003e\n\u003cp\u003eI led workshop in addition to other AMGeO team members: Liam Kilcommons, Tomoko Matsuo.\nWe had support from Nicholas Bartel, Jason Li.\u003c/p\u003e\n\u003cp\u003eSpecial thanks to Andrew Monaghan, who gave us support for running an AWS instance during the workshop.\u003c/p\u003e","title":"AMGeO Workshop 2021 @ CEDAR"},{"content":"Data-Driven Modeling of Polar Ionospheric Electrodynamics Using Convolutional Neural Networks After my graduation in 2020, I presented some of the work I did while working with Tomoko Matsuo my senior year.\nPoster AGU 2021 Poster\nAbstract Polar ionospheric electrodynamics are an integral part of understanding the Sun to Earth connection. Fusing data from multiple measurement sources and creating more accurate, consistent, and complete descriptions of electrodynamics for research in this area is incredibly important, yet a classically difficult task. One of the main issues is the constantly changing state of the ionospheric electrodynamics. The recently developed AMGeO (Assimilative Mapping of Geospace Observations) open-source software utilizes a Bayesian inferential framework to solve the spatial prediction problem posed by the need to fill the gaps left in sparsely and irregularly sampled data. AMGeO offers a robust approximation to this inferential problem and produces snapshot maps of polar ionospheric electrodynamics states.\nThis paper aims to expand the scope of the Bayesian inferential problem solved in AMGeO to a spatiotemporal prediction problem. Solving the spatiotemporal problem will require a state transition model that takes a current state and predicts a state at a future time step. The state transition model is being learned from large volumes of AMGeO maps using Convolutional Neural Networks. The improvements gained by this expansion will be evaluated on various performance metrics.\nAuthors Willem Mirkovich, Tomoko Matsuo, Liam Killcommons\n","permalink":"https://willemmirkovich.github.io/posts/agu-2020/","summary":"\u003ch1 id=\"data-driven-modeling-of-polar-ionospheric-electrodynamics-using-convolutional-neural-networks\"\u003eData-Driven Modeling of Polar Ionospheric Electrodynamics Using Convolutional Neural Networks\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"AGU Logo\" loading=\"lazy\" src=\"/img/agu-logo.png\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter my graduation in 2020, I presented some of the work I did while working with Tomoko Matsuo my senior year.\u003c/p\u003e\n\u003ch2 id=\"poster\"\u003ePoster\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://agu2020fallmeeting-agu.ipostersessions.com/Default.aspx?s=F7-22-9F-31-68-48-3B-97-09-C7-96-B3-96-D3-58-31#stay\"\u003eAGU 2021 Poster\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"abstract\"\u003eAbstract\u003c/h2\u003e\n\u003cp\u003ePolar ionospheric electrodynamics are an integral part of understanding the Sun to Earth connection. Fusing data from multiple measurement sources and creating more accurate, consistent, and complete descriptions of electrodynamics for research in this area is incredibly important, yet a classically difficult task. One of the main issues is the constantly changing state of the ionospheric electrodynamics. The recently developed AMGeO (Assimilative Mapping of Geospace Observations) open-source software utilizes a Bayesian inferential framework to solve the spatial prediction problem posed by the need to fill the gaps left in sparsely and irregularly sampled data. AMGeO offers a robust approximation to this inferential problem and produces snapshot maps of polar ionospheric electrodynamics states.\u003c/p\u003e","title":"My presentation @ AGU 2020"}]